generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String? @db.Text
  videos      Video[]
}

model Video {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  description String?   @db.Text
  file_path   String    @db.VarChar(255)
  category    Category? @relation(fields: [category_id], references: [id])
  category_id Int
}

model State {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(255)
  state   String @db.VarChar(255)
  country Int
  City    City[]
  User    User[]
}

model City {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(255)
  state    State? @relation(fields: [state_id], references: [id])
  state_id Int
  User     User[]
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  password_hash   String           @db.VarChar(60)
  auth_key        String?          @db.VarChar(255)
  confirmed_at    Int?
  blocked_at      Int?
  registration_ip String?          @db.VarChar(45)
  created_at      Float
  updated_at      Float?
  flag            Int?
  last_login_at   Float?
  origin          String?          @db.VarChar(255)
  num_turma       Int?
  name            String           @db.VarChar(255)
  bio             String?          @db.Text
  whatsapp        String?          @db.VarChar(255)
  cpf             String?          @db.VarChar(255)
  postalCode      String?          @db.VarChar(255)
  address         String?          @db.VarChar(255)
  addressNumber   String?          @db.VarChar(255)
  addressDistrict String?          @db.VarChar(255)
  image           String?          @db.VarChar(255)
  city            City?            @relation(fields: [city_id], references: [id])
  city_id         Int?
  state           State?           @relation(fields: [state_id], references: [id])
  state_id        Int?
  roles           String?          @db.VarChar(60)
  Annotation      Annotation[]
  ClassCompleted  ClassCompleted[]
}

model Component {
  id                 Int                  @id @default(autoincrement())
  name               String
  description        String?              @db.Text
  created_at         Float
  status             Int                  @default(1)
  order              Int?
  duration           Int?
  tags               String?              @db.VarChar(255)
  orderby            String?              @db.VarChar(255)
  component_id       Int?
  parent             Component?           @relation("ParentChildren", fields: [component_id], references: [id])
  children           Component[]          @relation("ParentChildren")
  Annotation         Annotation[]
  ClassCompleted     ClassCompleted[]
  ComponentAvailable ComponentAvailable[]
  ComponentExtra     ComponentExtra[]
}

model ComponentExtra {
  id           Int        @id @default(autoincrement())
  key_extra    String     @db.VarChar(100)
  value_extra  String     @db.Text
  created_at   Float
  status       Int
  Component    Component? @relation(fields: [component_id], references: [id])
  component_id Int?
}

model ComponentAvailable {
  id             Int        @id @default(autoincrement())
  turma_num      String     @db.VarChar(255)
  available_date DateTime
  Component      Component? @relation(fields: [component_id], references: [id])
  component_id   Int?
}

model Annotation {
  id           Int       @id @default(autoincrement())
  message      String    @db.Text
  created_at   Float
  status       Int
  User         User      @relation(fields: [user_id], references: [id])
  user_id      Int
  Component    Component @relation(fields: [component_id], references: [id])
  component_id Int
}

model ClassCompleted {
  id           Int       @id @default(autoincrement())
  created_at   Float
  rate         Int
  status       Int
  User         User      @relation(fields: [user_id], references: [id])
  user_id      Int
  Component    Component @relation(fields: [component_id], references: [id])
  component_id Int
}

model Lead {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(255)
  email        String   @db.VarChar(191)
  whatsapp     String   @db.VarChar(255)
  list         String   @db.VarChar(100)
  confirm      Int
  segmentacao  String   @db.VarChar(100)
  created_at   Float
  confirmed_at DateTime
  origin       String   @db.VarChar(255)
  naoperturbe  Int
}
